name: Backend Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_NAME: SWP391_Project_BE
  DOTNET_VERSION: 9.0.x
  EC2_HOST: ${{ secrets.EC2_HOST_PUBLIC }}
  EC2_USER: ${{ secrets.EC2_USER }}
  DEPLOYMENT_PATH: /var/www/SWP391_Project_BE

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    environment: SWP391
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore SWP391Web.sln --verbosity minimal

      - name: Build solution
        run: dotnet build SWP391Web.sln --configuration Release --no-restore --verbosity minimal

      - name: Run tests if any
        run: |
          if find . -name "*.Test*.csproj" -o -name "*Test.csproj" | grep -q .; then
            dotnet test SWP391Web.sln --configuration Release --no-build --verbosity minimal
          else
            echo "No test projects found, skipping tests"
          fi

      - name: Publish project (self-contained Linux)
        run: |
          dotnet publish SWP391Web.API/SWP391Web.API.csproj \
            -c Release \
            -o ./publish \
            -r linux-x64 \
            --self-contained true \
            /p:PublishTrimmed=false \
            /p:PublishSingleFile=false

      - name: Optimize publish folder
        run: |
          cd publish
          find . -name "*.pdb" -delete
          find . -name "*.xml" -delete
          rm -f appsettings.Development.json
          echo "Publish folder size: $(du -sh . | cut -f1)"

      - name: Create deployment package
        run: |
          cd publish
          zip -r9 ../deploy-package.zip .
          cd ..

      - name: Upload build artifacts (short retention)
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          path: deploy-package.zip
          retention-days: 1

      - name: Local cleanup
        if: always()
        run: |
          rm -rf ./publish
          rm -f deploy-package.zip
          dotnet nuget locals all --clear

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: SWP391
      url: http://${{ env.EC2_HOST }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}

      - name: Upload artifact to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "deploy-package.zip"
          target: "/tmp"

      - name: Deploy & restart service on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -euo pipefail

            PROJECT_NAME="${{ env.PROJECT_NAME }}"
            DEPLOYMENT_PATH="${{ env.DEPLOYMENT_PATH }}"
            APP_CONFIG_B64='${{ secrets.APP_CONFIG_B64 }}'

            cd /tmp
            rm -rf deploy_temp
            mkdir -p deploy_temp
            unzip -o deploy-package.zip -d deploy_temp/

            sudo systemctl stop "kestrel-${PROJECT_NAME}.service" || true

            AVAILABLE_SPACE=$(df /var/www --output=avail | tail -1 || echo 0)
            if [ "${AVAILABLE_SPACE}" -gt 1048576 ]; then
              sudo cp -r "${DEPLOYMENT_PATH}" "${DEPLOYMENT_PATH}.backup.$(date +%Y%m%d_%H%M%S)" || true
            fi

            sudo mkdir -p "${DEPLOYMENT_PATH}"
            sudo rm -rf "${DEPLOYMENT_PATH}"/*
            sudo cp -r deploy_temp/* "${DEPLOYMENT_PATH}"/
            sudo chown -R "${USER}:${USER}" "${DEPLOYMENT_PATH}"

            # Decode JSON config từ 1 secret base64 (không thêm newline)
            printf %s "${APP_CONFIG_B64}" | tr -d '\n' | base64 -d > /tmp/app.json

            # (Optional) Validate JSON nếu có python3
            if command -v python3 >/dev/null 2>&1; then
              python3 - <<'PY'
              import json
              json.load(open("/tmp/app.json","rb"))
              print("appsettings JSON OK")
              PY
            fi

            sudo tee "${DEPLOYMENT_PATH}/appsettings.Production.json" >/dev/null < /tmp/app.json

            # Đảm bảo file không rỗng
            [ -s "${DEPLOYMENT_PATH}/appsettings.Production.json" ] || { echo "Config file empty"; exit 1; }

            # Quyền thực thi cho binary (nếu cần)
            sudo chmod +x "${DEPLOYMENT_PATH}/SWP391Web.API" || true

            sudo systemctl start "kestrel-${PROJECT_NAME}.service"
            sleep 5
            sudo systemctl is-active --quiet "kestrel-${PROJECT_NAME}.service"

            # (Optional) smoke test nội bộ
            if command -v curl >/dev/null 2>&1; then
              curl -sf http://localhost:5000/health || curl -sf http://localhost:5000/swagger/index.html || true
            fi

            rm -rf /tmp/deploy_temp /tmp/deploy-package.zip /tmp/app.json
