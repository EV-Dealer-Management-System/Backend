name: Backend Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_NAME: SWP391_Project_BE
  DOTNET_VERSION: 9.0.x
  EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  EC2_HOST: ${{ secrets.EC2_HOST_PUBLIC }}
  EC2_USER: ${{ secrets.EC2_USER }}
  DEPLOYMENT_PATH: /var/www/${{ vars.PROJECT_NAME || 'SWP391_Project_BE' }}

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    environment: SWP391
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone to save space

      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |
          echo "::group::Restoring NuGet packages"
          dotnet restore --verbosity minimal
          echo "::endgroup::"

      - name: Build project
        run: |
          echo "::group::Building project"
          dotnet build --configuration Release --no-restore --verbosity minimal
          echo "::endgroup::"

      - name: Run tests if any
        run: |
          echo "::group::Running tests"
          if find . -name "*.Test*.csproj" -o -name "*Test.csproj" | grep -q .; then
            dotnet test --configuration Release --no-build --verbosity minimal
          else
            echo "No test projects found, skipping tests"
          fi
          echo "::endgroup::"

      - name: Clean build artifacts
        run: |
          echo "::group::Cleaning build artifacts"
          # Remove intermediate build files
          find . -name "bin" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "obj" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "Build artifacts cleaned"
          echo "::endgroup::"

      - name: Publish project
        run: |
          echo "::group::Publishing project"
          dotnet publish -c Release -o ./publish --no-build
          echo "::endgroup::"

      - name: Optimize publish folder
        run: |
          echo "::group::Optimizing publish folder"
          cd publish
          # Remove debug files
          find . -name "*.pdb" -delete
          find . -name "*.xml" -delete
          # Remove development files
          rm -f appsettings.Development.json
          # Show size
          echo "Publish folder size: $(du -sh . | cut -f1)"
          echo "::endgroup::"

      - name: Create deployment package
        run: |
          echo "::group::Creating deployment package"
          cd publish
          zip -r9 ../deploy-package.zip . 
          cd ..
          echo "Package size: $(du -h deploy-package.zip | cut -f1)"
          echo "::endgroup::"

      - name: Upload build artifacts (short retention)
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          path: deploy-package.zip
          retention-days: 1  # Keep only 1 day

      - name: Local cleanup
        if: always()
        run: |
          echo "::group::Local cleanup"
          rm -rf ./publish
          rm -f deploy-package.zip
          # Clean NuGet cache if needed
          dotnet nuget locals all --clear
          echo "Local cleanup completed"
          echo "::endgroup::"

  # Job 2: Deploy only on main branch push
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: Ticket_Metro
      url: http://${{ env.EC2_HOST }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}

      - name: Setup SSH connection
        run: |
          echo "::group::Setting up SSH"
          mkdir -p ~/.ssh
          echo "${{ env.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "${{ env.EC2_HOST }}" >> ~/.ssh/known_hosts
          echo "SSH setup completed"
          echo "::endgroup::"

      - name: Test SSH connection
        run: |
          echo "::group::Testing SSH connection"
          ssh -o ConnectTimeout=10 ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "echo 'SSH connection successful'"
          echo "::endgroup::"

      - name: Check and cleanup EC2 space
        run: |
          echo "::group::EC2 Space Management"
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
            echo 'Current disk usage:'
            df -h
            
            echo 'Cleaning old backups (keep only last 3):'
            ls -la ${{ env.DEPLOYMENT_PATH }}.backup.* 2>/dev/null | wc -l || echo 'No backups found'
            ls -t ${{ env.DEPLOYMENT_PATH }}.backup.* 2>/dev/null | tail -n +4 | xargs rm -rf || echo 'No old backups to remove'
            
            echo 'Cleaning system logs:'
            sudo journalctl --vacuum-time=7d
            
            echo 'Cleaning package cache:'
            sudo apt-get clean || sudo yum clean all || echo 'No package manager cleanup available'
            
            echo 'Cleaning tmp files:'
            sudo rm -rf /tmp/deploy_temp /tmp/deploy-package.zip /tmp/*.zip
            
            echo 'After cleanup:'
            df -h
          "
          echo "::endgroup::"

      - name: Upload deployment package
        run: |
          echo "::group::Uploading deployment package"
          scp -o ConnectTimeout=30 deploy-package.zip ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/tmp/
          echo "Upload completed successfully"
          echo "::endgroup::"

      - name: Deploy to EC2
        run: |
          echo "::group::Deploying application"
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
            set -e
            
            echo 'Preparing deployment...'
            cd /tmp
            rm -rf deploy_temp
            mkdir -p deploy_temp
            
            echo 'Extracting package...'
            unzip -o deploy-package.zip -d deploy_temp/
            
            echo 'Stopping service...'
            sudo systemctl stop kestrel-${{ env.PROJECT_NAME }}.service || echo 'Service was not running'
            
            echo 'Creating backup (only if space available)...'
            AVAILABLE_SPACE=\$(df /var/www --output=avail | tail -1)
            if [ \$AVAILABLE_SPACE -gt 1048576 ]; then  # > 1GB
              sudo cp -r ${{ env.DEPLOYMENT_PATH }} ${{ env.DEPLOYMENT_PATH }}.backup.\$(date +%Y%m%d_%H%M%S) || echo 'Backup failed'
            else
              echo 'Skipping backup due to low disk space'
            fi
            
            echo 'Deploying new version...'
            sudo mkdir -p ${{ env.DEPLOYMENT_PATH }}
            sudo rm -rf ${{ env.DEPLOYMENT_PATH }}/*  # Clear old files
            sudo cp -r deploy_temp/* ${{ env.DEPLOYMENT_PATH }}/
            sudo chown -R www-data:www-data ${{ env.DEPLOYMENT_PATH }}
            
            echo 'Starting service...'
            sudo systemctl start kestrel-${{ env.PROJECT_NAME }}.service
            
            echo 'Waiting for service to start...'
            sleep 5
            
            echo 'Checking service status...'
            sudo systemctl is-active --quiet kestrel-${{ env.PROJECT_NAME }}.service && echo 'Service is running' || (echo 'Service failed to start' && exit 1)
            
            echo 'Immediate cleanup...'
            rm -rf /tmp/deploy_temp /tmp/deploy-package.zip
            
            echo 'Final disk usage:'
            df -h
            
            echo 'Deployment completed successfully!'
          "
          echo "::endgroup::"

      - name: Health check
        run: |
          echo "::group::Health check"
          sleep 10
          # Add your health endpoint here if available
          # curl -f http://${{ env.EC2_HOST }}/health || exit 1
          echo "Health check completed"
          echo "::endgroup::"

      - name: Cleanup SSH and local files
        if: always()
        run: |
          rm -f ~/.ssh/id_ed25519
          rm -f deploy-package.zip
          echo "SSH and local cleanup completed"

      - name: Delete deployment artifacts
        if: always()
        uses: geekyeggo/delete-artifact@v2
        with:
          name: deployment-package-${{ github.sha }}

      - name: Deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Project:** ${{ env.PROJECT_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Ticket_Metro" >> $GITHUB_STEP_SUMMARY
          echo "- **Target:** ${{ env.EC2_USER }}@${{ env.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Success" >> $GITHUB_STEP_SUMMARY

  # Job 3: Cleanup old artifacts automatically
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Delete old artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: deployment-package-*
          useGlob: true
          skipIfNotFound: true
