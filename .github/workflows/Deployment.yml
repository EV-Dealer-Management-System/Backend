name: Backend Deployment

on:
  push:
    branches:
      - main

env:
  PROJECT_NAME: SWP391_Project_BE
  DOTNET_VERSION: 9.0.x
  DEPLOYMENT_PATH: /var/www/SWP391_Project_BE

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore SWP391Web.sln

      - name: Build solution
        run: dotnet build SWP391Web.sln --configuration Release --no-restore

      - name: Run tests (if any)
        run: |
          if find . -name "*.Test*.csproj" -o -name "*Test.csproj" | grep -q .; then
            dotnet test SWP391Web.sln --configuration Release --no-build
          else
            echo "No test projects found, skipping tests"
          fi

      - name: Publish project (self-contained Linux-x64)
        run: |
          dotnet publish SWP391Web.API/SWP391Web.API.csproj \
            -c Release \
            -o ./publish \
            -r linux-x64 \
            --self-contained true \
            /p:PublishTrimmed=true \
            /p:PublishSingleFile=true

      - name: Optimize publish folder
        run: |
          cd publish
          find . -name "*.pdb" -delete
          find . -name "*.xml" -delete
          rm -f appsettings.Development.json
          echo "Publish folder size: $(du -sh . | cut -f1)"

      - name: Create deployment package
        run: |
          cd publish
          zip -r9 ../deploy-package.zip .
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deploy-package.zip
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.EC2_HOST_PUBLIC }}" >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: ssh -o ConnectTimeout=10 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_PUBLIC }} "echo 'SSH OK'"

      - name: Upload deployment package
        run: scp -o ConnectTimeout=30 deploy-package.zip \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_PUBLIC }}:/tmp/

      - name: Deploy on EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_PUBLIC }} "
            set -e
            cd /tmp
            rm -rf deploy_temp
            mkdir deploy_temp
            unzip -o deploy-package.zip -d deploy_temp

            sudo systemctl stop kestrel-${{ env.PROJECT_NAME }}.service || true

            AVAILABLE_SPACE=\$(df /var/www --output=avail | tail -1)
            if [ \$AVAILABLE_SPACE -gt 1048576 ]; then
              sudo cp -r ${{ env.DEPLOYMENT_PATH }} ${{ env.DEPLOYMENT_PATH }}.backup.\$(date +%Y%m%d_%H%M%S) || true
            fi

            sudo mkdir -p ${{ env.DEPLOYMENT_PATH }}
            sudo rm -rf ${{ env.DEPLOYMENT_PATH }}/*
            sudo cp -r deploy_temp/* ${{ env.DEPLOYMENT_PATH }}/
            sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} ${{ env.DEPLOYMENT_PATH }}

            sudo systemctl start kestrel-${{ env.PROJECT_NAME }}.service
            sleep 5
            sudo systemctl is-active --quiet kestrel-${{ env.PROJECT_NAME }}.service || exit 1

            rm -rf /tmp/deploy_temp /tmp/deploy-package.zip
          "

      - name: Cleanup SSH
        if: always()
        run: rm -f ~/.ssh/id_rsa deploy-package.zip
