name: Backend Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_NAME: SWP391_Project_BE
  DOTNET_VERSION: 9.0.x
  EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  EC2_HOST: ${{ secrets.EC2_HOST_PUBLIC }}
  EC2_USER: ${{ secrets.EC2_USER }}
  DEPLOYMENT_PATH: /var/www/SWP391_Project_BE

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    environment: SWP391
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore SWP391Web.sln --verbosity minimal

      - name: Build solution
        run: dotnet build SWP391Web.sln --configuration Release --no-restore --verbosity minimal

      - name: Run tests if any
        run: |
          if find . -name "*.Test*.csproj" -o -name "*Test.csproj" | grep -q .; then
            dotnet test SWP391Web.sln --configuration Release --no-build --verbosity minimal
          else
            echo "No test projects found, skipping tests"
          fi

      - name: Publish project (self-contained Linux)
        run: |
          dotnet publish SWP391Web.API/SWP391Web.API.csproj \
            -c Release \
            -o ./publish \
            -r linux-x64 \
            --self-contained true \
            /p:PublishTrimmed=false \
            /p:PublishSingleFile=false

      - name: Optimize publish folder
        run: |
          cd publish
          find . -name "*.pdb" -delete
          find . -name "*.xml" -delete
          rm -f appsettings.Development.json
          echo "Publish folder size: $(du -sh . | cut -f1)"

      - name: Create deployment package
        run: |
          cd publish
          zip -r9 ../deploy-package.zip .
          cd ..

      - name: Upload build artifacts (short retention)
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          path: deploy-package.zip
          retention-days: 1

      - name: Local cleanup
        if: always()
        run: |
          rm -rf ./publish
          rm -f deploy-package.zip
          dotnet nuget locals all --clear

  - name: Deploy to EC2
  run: |
    # bind biến shell từ env/secrets để tránh chèn trực tiếp trong khối SSH
    EC2_USER="${{ env.EC2_USER }}"
    EC2_HOST="${{ env.EC2_HOST }}"
    PROJECT_NAME="${{ env.PROJECT_NAME }}"
    DEPLOYMENT_PATH="${{ env.DEPLOYMENT_PATH }}"
    APP_CONFIG_B64='${{ secrets.APP_CONFIG_B64 }}'

    # copy artifact lên EC2
    scp -o ConnectTimeout=30 deploy-package.zip "${EC2_USER}@${EC2_HOST}:/tmp/"

    # chạy script từ máy runner, pipe sang phiên SSH (tránh nhồi quote)
    ssh -o StrictHostKeyChecking=no "${EC2_USER}@${EC2_HOST}" 'bash -s' <<'EOSSH'
set -euo pipefail

PROJECT_NAME="${PROJECT_NAME}"
DEPLOYMENT_PATH="${DEPLOYMENT_PATH}"
APP_CONFIG_B64="${APP_CONFIG_B64}"

cd /tmp
rm -rf deploy_temp
mkdir -p deploy_temp
unzip -o deploy-package.zip -d deploy_temp/

sudo systemctl stop "kestrel-${PROJECT_NAME}.service" || true

AVAILABLE_SPACE=$(df /var/www --output=avail | tail -1)
if [ "$AVAILABLE_SPACE" -gt 1048576 ]; then
  sudo cp -r "$DEPLOYMENT_PATH" "${DEPLOYMENT_PATH}.backup.$(date +%Y%m%d_%H%M%S)" || true
fi

sudo mkdir -p "$DEPLOYMENT_PATH"
sudo rm -rf "$DEPLOYMENT_PATH"/*
sudo cp -r deploy_temp/* "$DEPLOYMENT_PATH"/
sudo chown -R $(whoami):$(whoami) "$DEPLOYMENT_PATH"

# decode base64 -> /tmp/app.json (không thêm newline)
printf %s "$APP_CONFIG_B64" | tr -d '\n' | base64 -d > /tmp/app.json

# (tùy chọn) validate JSON nếu có python3
if command -v python3 >/dev/null 2>&1; then
python3 - <<'PY'
import json
json.load(open("/tmp/app.json","rb"))
print("appsettings JSON OK")
PY
fi

# ghi file config
sudo tee "$DEPLOYMENT_PATH/appsettings.Production.json" >/dev/null < /tmp/app.json

# đảm bảo file không rỗng
[ -s "$DEPLOYMENT_PATH/appsettings.Production.json" ] || { echo "Config file empty"; exit 1; }

# đảm bảo binary có quyền thực thi
sudo chmod +x "$DEPLOYMENT_PATH/SWP391Web.API" || true

sudo systemctl start "kestrel-${PROJECT_NAME}.service"
sleep 5
sudo systemctl is-active --quiet "kestrel-${PROJECT_NAME}.service" || exit 1

rm -rf /tmp/deploy_temp /tmp/deploy-package.zip /tmp/app.json
EOSSH

rm -rf /tmp/deploy_temp /tmp/deploy-package.zip /tmp/app.json
'
